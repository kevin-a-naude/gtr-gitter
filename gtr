#!/bin/bash

function basename()
{
   local name="${1##*/}"
   echo "${name%$2}"
}

function dirname()
{
   local dir="${1%${1##*/}}"
   if [ "${dir:=./}" != "/" ]; then
       dir="${dir%?}"
   fi
   echo "$dir"
}


BNAME=""
function basename_here()
{
   local name="${1##*/}"
   BNAME="${name%$2}"
}

DNAME=""
function dirname_here()
{
   local dir="${1%${1##*/}}"
   if [ "${dir:=./}" != "/" ]; then
       dir="${dir%?}"
   fi
   DNAME="$dir"
}

RELDIR=""
function reldir() {
    dirname_here "$1"
    local NEW_DIR="$DNAME"
    if [ x"$NEW_DIR" != x"" ]; then
        RELDIR="$NEW_DIR/$2"
    else
        RELDIR=""
    fi
}
function rel2dir() {
    dirname_here "$1"
    dirname_here "$DNAME"
    local NEW_DIR="$DNAME"
    if [ x"$NEW_DIR" != x"" ]; then
        RELDIR="$NEW_DIR/$2"
    else
        RELDIR=""
    fi
}

QUIET=""
# QUIET="true"
function params() {
    if [ x"$QUIET" == x"" ]; then
        local PARAMS=""
        if [ x"$1" != x"" ]; then
            PARAM="$1"
            PARAM_E="${PARAM/ /}"
            if [ x"$1" == x"$PARAM_E" ]; then
                PARAMS="$1"
            else
                PARAMS="\"$1\""
            fi
            shift
            while [ x"$1" != x"" ]; do
                if [[ "$1" != --git-dir=* ]] && [[  "$1" != --work-tree=* ]]; then
                    PARAM="$1"
                    PARAM_E="${PARAM/ /}"
                    PARAM_E="${PARAM_E//\"/}"
                    if [ x"$1" == x"$PARAM_E" ]; then
                        PARAM_E="$1"
                    else
                        PARAM_E="\"${PARAM//\"/\\\"}\""
                    fi
                    PARAMS="$PARAMS $PARAM_E"
                fi
                shift
            done
        fi
        START=`printf "\033[1m"`
        END=`printf "\033[0m"`
        echo $START[ $PARAMS ]$END
        #echo $PARAMS
    fi
}

function go() {
    params "$@"
    "$@"
}


TRY_RESULT=""
function TryIt() {
    if [[ ! -d "$1/.git" && ! -d "$1.git" && x"$2" == x""  && x"$3" != x"TRUE" ]]; then
        TRY_RESULT="TRUE"
    else
        TRY_RESULT=""
    fi
}


GDIR=""
GTREE=""
function getGIT() {
    local DIR="$PWD"
    local NEWDIR="$DIR"

    basename_here "$DIR" .git
    local NAME="$BNAME"
    local ALTEXT=${DIR: -4:4}

    dirname_here "$DIR"
    local ALTDIR="$DNAME/$NAME"
    local ALTEX=""

    rel2dir "$DIR" "work/$NAME"
    local WDIR="$RELDIR"
    rel2dir "$DIR" "projects/$NAME"
    local PDIR="$RELDIR"
    rel2dir "$DIR" "repos/$NAME.git"
    local RDIR="$RELDIR"
    rel2dir "$DIR" "repos/$NAME"
    local RDIR2="$RELDIR"

    local SPLITDIR=""
    local SPLITDIR2=""
    if [[ -d "$RDIR" ]]; then
        SPLITDIR2="$RDIR"
    elif [[ -d "$RDIR2" ]]; then
        SPLITDIR2="$RDIR2"
    fi
    if [[ x"$SPLITDIR2" != x"" ]]; then
        if [[ -d "$PDIR" ]]; then
            SPLITDIR="$PDIR"
        elif [[ -d "$WDIR" ]]; then
            SPLITDIR="$WDIR"
        else
            SPLITDIR="TRUE"
        fi
    elif [[ x"$ALTDIR" != x"" && "$ALTEXT" == ".git" ]]; then
        ALTEX="TRUE"
    fi

    TryIt "$DIR" "$SPLITDIR" "$ALTEX"
    # while [[ ! -d "$DIR/.git" && ! -d "$DIR.git" && x"$SPLITDIR" == x""  && x"$ALTEX" != x"TRUE" ]]
    while [ x"$TRY_RESULT" != x"" ]
    do
        dirname_here "$DIR"
        NEWDIR="$DNAME"
        if [[ x"$NEWDIR" == x"$DIR" || "$NEWDIR" == "/" ]]; then
            break
        fi
        DIR="$NEWDIR"
        ALTEXT=${DIR: -4:4}
        dirname_here "$DIR"
        basename_here "$DIR" .git
        ALTDIR="$DNAME/$BNAME"

        rel2dir "$DIR" "work/$BNAME"
        WDIR="$RELDIR"
        rel2dir "$DIR" "projects/$BNAME"
        PDIR="$RELDIR"
        rel2dir "$DIR" "repos/$BNAME.git"
        RDIR="$RELDIR"
        rel2dir "$DIR" "repos/$BNAME"
        RDIR2="$RELDIR"

        if [[ "$RDIR" != "//"* ]]; then
            if [[ -d "$RDIR" ]]; then
                SPLITDIR2="$RDIR"
            elif [[ -d "$RDIR2" ]]; then
                SPLITDIR2="$RDIR2"
            fi
        fi
        if [[ x"$SPLITDIR2" != x"" ]]; then
            if [[ -d "$PDIR" ]]; then
                SPLITDIR="$PDIR"
            elif [[ -d "$WDIR" ]]; then
                SPLITDIR="$WDIR"
            else
                SPLITDIR="TRUE"
            fi
        elif [[ x"$ALTDIR" != x"" && "$ALTEXT" == ".git" ]]; then
            ALTEX="TRUE"
        fi
        TryIt "$DIR" "$SPLITDIR" "$ALTEX"
    done
    if [ -d "$DIR/.git" ]; then
        GDIR="--git-dir=$DIR/.git"
        GTREE="--work-tree=$DIR"
    elif [ -d "$DIR.git" ]; then
        GDIR="--git-dir=$DIR.git"
        if [ -d "$DIR" ]; then
            GTREE="--work-tree=$DIR"
        fi
    elif [ x"$SPLITDIR" != x"" ]; then
        GDIR="--git-dir=$SPLITDIR2"
        if [ x"$SPLITDIR" == x"TRUE" ]; then
            GTREE=""
        else
            GTREE="--work-tree=$SPLITDIR"
        fi
    elif [ x"$ALTEX" == x"TRUE" ]; then
        GDIR="--git-dir=$ALTDIR.git"
        GTREE="--work-tree=$ALTDIR"
    else
        GDIR=""
        GTREE=""
    fi
}


function qgogit() {
    local TREEDIR=""
    if [[ $GTREE == --work-tree=* ]]; then
        TREEDIR=${GTREE/--work-tree=/}
    fi
    if [[ $PWD == $TREEDIR*  ]]; then
        git "$@"
    else
        pushd $TREEDIR >/dev/null
        git "$@"
        popd >/dev/null
    fi
}

function gogit() {
    params git "$@"
    qgogit "$@"
}

function gogitDT() {
    gogit $GDIR $GTREE "$@"
}

function gogitD() {
    gogit $GDIR "$@"
}

function gogitT() {
    gogit $GTREE "$@"
}

function qgogitDT() {
    qgogit $GDIR $GTREE "$@"
}

function qgogitD() {
    qgogit $GDIR "$@"
}

function qgogitT() {
    qgogit $GTREE "$@"
}


BRANCH=""
function getBranch() {
    BRANCH=$(qgogitDT branch --no-color 2>/dev/null | sed -e '/^[^*]/d' -e 's/*\s*\(.*\)/\1/')
}

REMOTE=""
function getRemote() {
    if [ x"$BRANCH" == x"" ]; then
        getBranch
    fi
    if [ x"$BRANCH" != x"" ]; then
        REMOTE=$(qgogitDT config branch.$BRANCH.remote)
    fi
}

REMOTE_BRANCH=""
function getRemoteBranch() {
    if [ x"$BRANCH" == x"" ]; then
        getBranch
    fi
    if [ x"$BRANCH" != x"" ]; then
        REMOTE_BRANCH=$(qgogitDT config branch.$BRANCH.merge | sed -e 's/refs\/heads\/\(.*\)/\1/')
    fi
}

REMOTE_SLASH_BRANCH=""
function getRemoteSlashBranch() {
    if [ x"$REMOTE" == x"" ]; then
        getRemote
    fi
    if [ x"$REMOTE_BRANCH" == x"" ]; then
        getRemoteBranch
    fi
    if [[ x"$REMOTE" != x"" ]] && [[ x"$REMOTE_BRANCH" != x"" ]]; then
        REMOTE_SLASH_BRANCH="$REMOTE/$REMOTE_BRANCH"
    fi
}


function gtr_usage() {
    local DISCOVERED="none"
    if [[ x"$GDIR" != x"" ]] || [[ x"$GTREE" != x"" ]]; then
        DISCOVERED="$GDIR $GTREE"
    fi
    # local PROG=$(basename $0)
    local PROG="gtr"
    cat <<END
gitter -- a git convenience wrapper written by Kevin A. NaudÃ©
git paths discovered: $DISCOVERED
Usage:
    $PROG setup user-name user-email
    $PROG init [bare|split] project-name
    $PROG clone [bare|split] project-url [alt-project-name]

    $PROG new[-branch] branch-name
    $PROG get branch-name

    $PROG commit [message|!]
    $PROG pull [source] (under|over)
    $PROG merge [source] [squash]
    $PROG squash wrt-check-point [message|!]

    $PROG which (hash|branch|tag|remote|remote-branch)
    $PROG log [g[1|2]]
    $PROG check

    $PROG add [paths]
    $PROG stage
    $PROG git ...
    $PROG ...
END
}


function gtr_init() {
    local HERE="$PWD"
    local BARE=""
    local NAME=""
    local WDIR=""
    local GDIR=""
    local NORM=""
    if [ x"$1" == x"bare" ]; then
        shift
        BARE="--bare"
        NAME="$1"
        GDIR="$HERE/$NAME"
    elif [ x"$1" == x"split" ]; then
        shift
        NAME="$1"
        reldir "$HERE" "work"
        WDIR2="$RELDIR"
        reldir "$HERE" "projects"
        WDIR3="$RELDIR"
        reldir "$HERE" "repos"
        GDIR2="$RELDIR"
        local DONE=""
        if [[ -d "$GDIR2" ]] && [[ -d "$WDIR2" ]]; then
            if [[ "$GDIR2" == "$HERE"* ]] || [[ "$WDIR2" == "$HERE"* ]]; then
                WDIR="$WDIR2/$NAME"
                GDIR="$GDIR2/$NAME"
                DONE="TRUE"
            fi
        elif [[ -d "$GDIR2" ]] && [[ -d "$WDIR3" ]]; then
            if [[ "$GDIR2" == "$HERE"* ]] || [[ "$WDIR3" == "$HERE"* ]]; then
                WDIR="$WDIR3/$NAME"
                GDIR="$GDIR2/$NAME"
                DONE="TRUE"
            fi
        fi
        if [ x"$DONE" == x"" ]; then
            WDIR="$HERE/$NAME"
            GDIR="$HERE/$NAME.git"
        fi
    else
        NAME="$1"
        WDIR="$HERE/$NAME"
        GDIR="$HERE/$NAME/.git"
        NORM="TRUE"
    fi
    shift
    if [ x"$NORM" == x"" ]; then
        if [ x"$BARE" == x"" ]; then
            go mkdir -p "$WDIR"
        fi
        go mkdir -p "$GDIR"
        pushd "$GDIR" >/dev/null
        go git init --bare "$@"
        popd >/dev/null
    else
        go mkdir -p "$WDIR"
        pushd "$WDIR" >/dev/null
        go git init "$@"
        popd >/dev/null
    fi
    if [ x"$BARE" == x"" ]; then
        pushd "$WDIR" >/dev/null
        go git "--git-dir=$GDIR" "--work-tree=$WDIR" config core.logallrefupdates "true"
        go git "--git-dir=$GDIR" "--work-tree=$WDIR" commit --allow-empty -m "Created."
        popd >/dev/null
    fi
}


CLONE_NAME=""
CLONE_URL=""
CLONE_EXTRA=""
function clone_name() {
    if [ x"$1" == x"" ]; then
        gtr_usage
        return -1
    fi
    basename_here "$1" .git
    CLONE_NAME="$BNAME"
    CLONE_URL="$1"
    CLONE_EXTRA=""
    shift
    if [ x"$1" != x"" ]; then
        CLONE_NAME="$1"
        CLONE_EXTRA="1"
        shift
    fi
}

function gtr_clone() {
    local HERE="$PWD"
    local BARE=""
    local NAME=""
    local WDIR=""
    local GDIR=""
    local NORM=""
    if [ x"$1" == x"bare" ]; then
        shift
        BARE="--bare"
        clone_name "$1" "$2"
        shift
        if [ x"$CLONE_EXTRA" != x"" ]; then
            shift
        fi
        GDIR="$HERE/$CLONE_NAME"
    elif [ x"$1" == x"split" ]; then
        shift
        clone_name "$1" "$2"
        shift
        if [ x"$CLONE_EXTRA" != x"" ]; then
            shift
        fi
        reldir "$HERE" "work"
        WDIR2="$RELDIR"
        reldir "$HERE" "projects"
        WDIR3="$RELDIR"
        reldir "$HERE" "repos"
        GDIR2="$RELDIR"
        local DONE=""
        if [[ -d "$GDIR2" ]] && [[ -d "$WDIR2" ]]; then
            if [[ "$GDIR2" == "$HERE"* ]] || [[ "$WDIR2" == "$HERE"* ]]; then
                WDIR="$WDIR2/$CLONE_NAME"
                GDIR="$GDIR2/$CLONE_NAME"
                DONE="TRUE"
            fi
        elif [[ -d "$GDIR2" ]] && [[ -d "$WDIR3" ]]; then
            if [[ "$GDIR2" == "$HERE"* ]] || [[ "$WDIR3" == "$HERE"* ]]; then
                WDIR="$WDIR3/$CLONE_NAME"
                GDIR="$GDIR2/$CLONE_NAME"
                DONE="TRUE"
            fi
        fi
        if [ x"$DONE" == x"" ]; then
            WDIR="$HERE/$CLONE_NAME"
            GDIR="$HERE/$CLONE_NAME.git"
        fi
    else
        clone_name "$1" "$2"
        shift
        if [ x"$CLONE_EXTRA" != x"" ]; then
            shift
        fi
        WDIR="$HERE/$CLONE_NAME"
        GDIR="$HERE/$CLONE_NAME/.git"
        NORM="TRUE"
    fi
    shift
    if [ x"$NORM" == x"" ]; then
        if [ x"$BARE" == x"" ]; then
            go mkdir -p "$WDIR"
        fi
        go mkdir -p "$GDIR"
        pushd "$GDIR" >/dev/null
        go git clone --bare "$CLONE_URL" "." "$@"
        popd >/dev/null
    else
        go mkdir -p "$WDIR"
        pushd "$WDIR" >/dev/null
        go git clone "$CLONE_URL" "." "$@"
        popd >/dev/null
    fi
    if [ x"$BARE" == x"" ]; then
        pushd "$WDIR" >/dev/null
        if [ x"$NORM" == x"" ]; then
            go git "--git-dir=$GDIR" "--work-tree=$WDIR" config core.logallrefupdates "true"
            go git "--git-dir=$GDIR" "--work-tree=$WDIR" config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
            go git "--git-dir=$GDIR" "--work-tree=$WDIR" config branch.master.remote "origin"
            go git "--git-dir=$GDIR" "--work-tree=$WDIR" config branch.master.merge "refs/heads/master"
        fi
        go git "--git-dir=$GDIR" "--work-tree=$WDIR" checkout -f
        popd >/dev/null
    fi
}


function gtr_setup() {
    if [ x"$1" == x"" ]; then
        gtr_usage
        return -1
    fi
    if [ x"$2" == x"" ]; then
        gtr_usage
        return -1
    fi
    if [ x"$3" != x"" ]; then
        gtr_usage
        return -1
    fi
    gogit config --global user.name "$1"
    gogit config --global user.email "$2"
    gogit config --global color.ui "true"
}


function gtr_log() {
    # The two graph formats are attributed to Slipp D. Thompson's suggestion on Stack Overflow.
    # See http://stackoverflow.com/a/9074343/588948
    if [ x"$1" == x"" ]; then
        gogitDT log
    elif [[ x"$1" == x"g1" ]] || [[ x"$1" == x"g" ]]; then
        gogitDT log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)â %an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative
    elif [[ x"$1" == x"g2" ]]; then
        gogitDT log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(bold white)â %an%C(reset)' --abbrev-commit
    else
        gogitDT log "$@"
    fi
}


function gtr_which() {
    if [ x"$1" == x"hash" ]; then
        getBranch
        qgogitDT merge-base $BRANCH $BRANCH
    elif [ x"$1" == x"branch" ]; then
        # getBranch
        # echo "$BRANCH"
        qgogitDT branch --no-color 2>/dev/null | sed -e '/^[^*]/d' -e 's/*\s*\(.*\)/\1/'
    elif [ x"$1" == x"tag" ]; then
        qgogitDT describe --abbrev=0
    elif [ x"$1" == x"remote" ]; then
        getRemote
        echo "$REMOTE"
    elif [ x"$1" == x"remote-branch" ]; then
        getRemoteSlashBranch
        echo "$REMOTE_SLASH_BRANCH"
    else
        gtr_usage
        return -1
    fi
}


function gtr_get() {
    gogitDT checkout "$@"
}


function gtr_commit() {
    if [ x"$1" == x"!" ]; then
        gogitDT commit --allow-empty-message -m ""
    elif [ x"$1" == x"" ]; then
        gogitDT commit -e
    else
        gogitDT commit -m "$1"
    fi
}


function gtr_pull() {
    getRemoteSlashBranch
    local TARGET1="$REMOTE"
    local TARGET2="$REMOTE_SLASH_BRANCH"
    if [ x"$1" == x"" ]; then
        gtr_usage
        return -1
    fi
    if [[ x"$1" != x"over" ]] && [[ x"$1" != x"under" ]]; then
        if [ x"$1" != x"$REMOTE" ]; then
            if [[ "$1" == */* ]]; then
                TARGET="$1"
                TARGET2=${TARGET//[^\/]*\//}
                TARGET=${TARGET//\/[^\/]*/}
            else
                TARGET1="$1"
                TARGET2="$1/master"
            fi
        fi
        shift
    fi
    if [[ x"$1" == x"over" ]] || [[ x"$1" == x"under" ]]; then
        gogitDT tag -f gtr-check-point
        if [ x"$1" == x"over" ]; then
            gogitDT fetch "$TARGET1" && gogitDT merge "$TARGET2"
        elif [ x"$1" == x"under" ]; then
            gogitDT fetch "$TARGET1" && gogitDT rebase "$TARGET2"
        fi
    else
        gtr_usage
        return -1
    fi
}


function gtr_merge() {
    if [ x"$1" == x"" ]; then
        gtr_usage
        return -1
    fi
    gogitDT tag -f gtr-check-point
    if [ x"$2" == x"squash" ]; then
        gogitDT merge --squash --no-commit "$1" && gogitDT status
    else
        gogitDT merge --no-commit $1 && gogitDT status
    fi
}


function gtr_squash() {
    if [ x"$1" == x"" ]; then
        gtr_usage
        return -1
    fi
    gogitDT tag -f gtr-check-point
    local BRANCH=$(git $GDIR $GTREE branch --no-color 2>/dev/null | sed -e '/^[^*]/d' -e 's/*\s*\(.*\)/\1/')
    local HASH=$(qgogitDT merge-base "$BRANCH" "$BRANCH")
    local OTHER=$(qgogitDT merge-base "$1" "$BRANCH")
    shift
    gogitDT reset --hard "$OTHER" && gogitDT merge --squash "$HASH" && gtr_commit && gtr_check
}


function gtr_add() {
    if [ x"$1" == x""  ]; then
        gogitDT add . && gogitDT status
    else
        gogitDT add "$@" && gogitDT status
    fi
}


function gtr_stage() {
   gogitDT add -u && gogitDT status
}


GIT_CHECK_OK=""
function gtr_check () {
    qgogitDT update-index -q --ignore-submodules --refresh
    GIT_CHECK_OK=""
    local RESULT="yes"

    if ! qgogitDT diff-files --quiet --ignore-submodules --
    then
        gogitDT status >&2
        RESULT=""
    elif ! qgogitDT diff-index --cached --quiet HEAD --ignore-submodules --
    then
        gogitDT status >&2
        RESULT=""
    else
        echo "The work tree appears to be in a committed state."
    fi
    GIT_CHECK_OK="$RESULT"
}


function gtr_newBranch() {
    if [ x"$1" == x"" ]; then
        gtr_usage
        return -1
    fi
    qgogitDT update-index -q --ignore-submodules --refresh
    GIT_CHECK_OK=""
    local RESULT="yes"

    if ! qgogitDT diff-files --quiet --ignore-submodules --
    then
        RESULT=""
    elif ! qgogitDT diff-index --cached --quiet HEAD --ignore-submodules --
    then
        RESULT=""
    fi
    GIT_CHECK_OK=$RESULT
    if [ x"$GIT_CHECK_OK" != x"" ]; then
        gogitDT checkout -b "$1"
    else
        gogitDT stash save && gogitDT stash branch "$1"
    fi
}


function dispatch() {
    if [ x"$1" == x"" ]; then
        gtr_usage
        return 0
    fi

    while [[ x"$1" == x"-q" ]] || [[ x"$1" == x"-v" ]]; do
        if [ x"$1" == x"-q" ]; then
            QUIET="true"
            shift
        fi

        if [ x"$1" == x"-v" ]; then
            QUIET=""
            shift
        fi
    done

    case "$1" in
    setup)
        shift
        gtr_setup "$@"
        ;;
    init)
        shift
        gtr_init "$@"
        ;;
    clone)
        shift
        gtr_clone "$@"
        ;;
    check)
        shift
        gtr_check "$@"
        ;;
    get)
        shift
        gtr_get "$@"
        ;;
    pull)
        shift
        gtr_pull "$@"
        ;;
    merge)
        shift
        gtr_merge "$@"
        ;;
    squash)
        shift
        gtr_squash "$@"
        ;;
    commit)
        shift
        gtr_commit "$@"
        ;;
    new)
        shift
        gtr_newBranch "$@"
        ;;
    new-branch)
        shift
        gtr_newBranch "$@"
        ;;
    add)
        shift
        gtr_add "$@"
        ;;
    stage)
        shift
        gtr_stage "$@"
        ;;
    which)
        shift
        gtr_which "$@"
        ;;
    log)
        shift
        gtr_log "$@"
        ;;
    archive)
        gtr_archive "$@"
        ;;
    help)
        gtr_usage
        ;;
    git)
        shift
        gogitDT "$@"
        ;;
    *)
        gogitDT "$@"
        ;;
    esac
}

function gtr() {
    getGIT
    dispatch "$@"
}

if [ x"$GTR_LOADING" == x"" ]; then
    gtr "$@"
fi
